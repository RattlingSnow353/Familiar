[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# The Fool?
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "check_for_unlock({type = 'blind_discoveries'})"
position = "after"
payload = '''
jester_table = {
    ["j_joker"] = {},
    ["j_greedy_joker"] = {},
    ["j_lusty_joker"] = {},
    ["j_wrathful_joker"] = {},
    ["j_gluttenous_joker"] = {},
    ["j_jolly"] = {},
    ["j_zany"] = {},
    ["j_mad"] = {},
    ["j_crazy"] = {},
    ["j_droll"] = {},
    ["j_sly"] = {},
    ["j_wily"] = {},
    ["j_clever"] = {},
    ["j_devious"] = {},
    ["j_crafty"] = {},
    ["j_half"] = {},
    ["j_stencil"] = {},
    ["j_four_fingers"] = {},
    ["j_mime"] = {},
    ["j_credit_card"] = {},
    ["j_ceremonial"] = {},
    ["j_banner"] = {},
    ["j_mystic_summit"] = {},
    ["j_marble"] = {},
    ["j_loyalty_card"] = {},
    ["j_8_ball"] = {},
    ["j_misprint"] = {},
    ["j_dusk"] = {},
    ["j_raised_fist"] = {},
    ["j_chaos"] = {},
    ["j_fibonacci"] = {},
    ["j_steel_joker"] = {},
    ["j_scary_face"] = {},
    ["j_abstract"] = {},
    ["j_delayed_grat"] = {},
    ["j_hack"] = {},
    ["j_pareidolia"] = {},
    ["j_gros_michel"] = {},
    ["j_even_steven"] = {},
    ["j_odd_todd"] = {},
    ["j_scholar"] = {},
    ["j_business"] = {},
    ["j_supernova"] = {},
    ["j_ride_the_bus"] = {},
    ["j_space"] = {},
    ["j_egg"] = {},
    ["j_burglar"] = {},
    ["j_blackboard"] = {},
    ["j_runner"] = {},
    ["j_ice_cream"] = {},
    ["j_dna"] = {},
    ["j_splash"] = {},
    ["j_blue_joker"] = {},
    ["j_sixth_sense"] = {},
    ["j_constellation"] = {},
    ["j_hiker"] = {},
    ["j_faceless"] = {},
    ["j_green_joker"] = {},
    ["j_superposition"] = {},
    ["j_todo_list"] = {},
    ["j_cavendish"] = {},
    ["j_card_sharp"] = {},
    ["j_red_card"] = {},
    ["j_madness"] = {},
    ["j_square"] = {},
    ["j_seance"] = {},
    ["j_riff_raff"] = {},
    ["j_vampire"] = {},
    ["j_shortcut"] = {},
    ["j_hologram"] = {},
    ["j_vagabond"] = {},
    ["j_baron"] = {},
    ["j_cloud_9"] = {},
    ["j_rocket"] = {},
    ["j_obelisk"] = {},
    ["j_midas_mask"] = {},
    ["j_luchador"] = {},
    ["j_photograph"] = {},
    ["j_gift"] = {},
    ["j_turtle_bean"] = {},
    ["j_erosion"] = {},
    ["j_reserved_parking"] = {},
    ["j_mail"] = {},
    ["j_to_the_moon"] = {},
    ["j_hallucination"] = {},
    ["j_fortune_teller"] = {},
    ["j_juggler"] = {},
    ["j_drunkard"] = {},
    ["j_stone"] = {},
    ["j_golden"] = {},
    ["j_lucky_cat"] = {},
    ["j_baseball"] = {},
    ["j_bull"] = {},
    ["j_diet_cola"] = {},
    ["j_trading"] = {},
    ["j_flash"] = {},
    ["j_popcorn"] = {},
    ["j_trousers"] = {},
    ["j_ancient"] = {},
    ["j_ramen"] = {},
    ["j_walkie_talkie"] = {},
    ["j_selzer"] = {},
    ["j_castle"] = {},
    ["j_smiley"] = {},
    ["j_campfire"] = {},
    ["j_ticket"] = {},
    ["j_mr_bones"] = {},
    ["j_acrobat"] = {},
    ["j_sock_and_buskin"] = {},
    ["j_swashbuckler"] = {},
    ["j_troubadour"] = {},
    ["j_certificate"] = {},
    ["j_smeared"] = {},
    ["j_throwback"] = {},
    ["j_hanging_chad"] = {},
    ["j_rough_gem"] = {},
    ["j_bloodstone"] = {},
    ["j_arrowhead"] = {},
    ["j_onyx_agate"] = {},
    ["j_glass"] = {},
    ["j_ring_master"] = {},
    ["j_flower_pot"] = {},
    ["j_blueprint"] = {},
    ["j_wee"] = {},
    ["j_merry_andy"] = {},
    ["j_oops"] = {},
    ["j_idol"] = {},
    ["j_seeing_double"] = {},
    ["j_matador"] = {},
    ["j_hit_the_road"] = {},
    ["j_duo"] = {},
    ["j_trio"] = {},
    ["j_family"] = {},
    ["j_order"] = {},
    ["j_tribe"] = {},
    ["j_stuntman"] = {},
    ["j_invisible"] = {},
    ["j_brainstorm"] = {},
    ["j_satellite"] = {},
    ["j_shoot_the_moon"] = {},
    ["j_drivers_license"] = {},
    ["j_cartomancer"] = {},
    ["j_astronomer"] = {},
    ["j_burnt"] = {},
    ["j_bootstraps"] = {},
    ["j_caino"] = {},
    ["j_triboulet"] = {},
    ["j_yorick"] = {},
    ["j_chicot"] = {},
    ["j_perkeo"] = {},
}
for k, joker in pairs(G.P_CENTER_POOLS['Joker']) do
    if joker.set == 'Joker' and joker.familiar then 
        for key, _ in pairs(jester_table) do
            if key == joker.familiar then
                table.insert(jester_table[joker.familiar], joker.key)
            end
        end 
    end
end
'''
match_indent = true 

# Oligarch
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "check_for_unlock({type = 'blind_discoveries'})"
position = "after"
payload = '''
fam_comsumable_table = {
    ["c_strength"] = {},
    ["c_hanged_man"] = {},
    ["c_death"] = {},
    ["c_judgement"] = {},
    ["c_hermit"] = {},
    ["c_tower"] = {},
    ["c_lovers"] = {},
    ["c_moon"] = {},
    ["c_sun"] = {},
    ["c_star"] = {},
    ["c_world"] = {},
    ["c_emperor"] = {},
    ["c_empress"] = {},
    ["c_high_priestess"] = {},
    ["c_hierophant"] = {},
    ["c_chariot"] = {},
    ["c_fool"] = {},
    ["c_magician"] = {},
    ["c_wheel_of_fortune"] = {},
    ["c_devil"] = {},
    ["c_justice"] = {},
    ["c_temperance"] = {},
    ["c_ceres"] = {},
    ["c_earth"] = {},
    ["c_eris"] = {},
    ["c_jupiter"] = {},
    ["c_mars"] = {},
    ["c_mercury"] = {},
    ["c_neptune"] = {},
    ["c_planet_x"] = {},
    ["c_pluto"] = {},
    ["c_saturn"] = {},
    ["c_uranus"] = {},
    ["c_venus"] = {},
}
for k, joker in pairs(G.P_CENTER_POOLS['Consumeables']) do
    if joker.familiar then 
        for key, _ in pairs(fam_comsumable_table) do
            if key == joker.familiar then
                table.insert(fam_comsumable_table[joker.familiar], joker.key)
            end
        end 
    end
end
'''
match_indent = true 

# Sixers Scrapbook
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "if #G.hand.highlighted <= 0 or G.GAME.blind.block_play or #G.hand.highlighted > 5 then"
position = "at"
payload = '''
if #G.hand.highlighted <= 0 or G.GAME.blind.block_play or #G.hand.highlighted > G.hand.config.highlighted_limit then
'''
match_indent = true 

# Debit Card
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "elseif config.name == 'interest' then"
position = "before"
payload = '''
elseif config.name == 'debit' then
    local debit_card = false
    for i = 1, #G.jokers.cards do
        if G.jokers.cards[i].ability.name == "j_fam_debit_card" then
            debit_card = true
        end
    end
    if debit_card then
        table.insert(left_text, {n=G.UIT.T, config={text = num_dollars, scale = 0.8*scale, colour = G.C.RED, shadow = true, juice = true}})
        table.insert(left_text,{n=G.UIT.O, config={object = DynaText({string = {" Debit Card (Half of total)"}, colours = {G.C.UI.TEXT_LIGHT}, shadow = true, pop_in = 0, scale = 0.4*scale, silent = true})}})
    end
'''
match_indent = true 

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "add_round_eval_row({name = 'bottom', dollars = dollars})"
position = "before"
payload = '''
for i = 1, #G.jokers.cards do
    if G.jokers.cards[i].ability.name == "j_fam_debit_card" then
        dollars = dollars/2
        G.jokers.cards[i].ability.extra.last_cash = G.jokers.cards[i].ability.extra.cash
        G.jokers.cards[i].ability.extra.cash = G.jokers.cards[i].ability.extra.cash + math.ceil(dollars)
        add_round_eval_row({bonus = true, name='debit', pitch = pitch, dollars = -math.ceil(dollars)})
        dollars = math.floor(dollars)
    end
end
'''
match_indent = true 

# Rug Pull
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "dollars = dollars + G.GAME.interest_amount*math.min(math.floor(G.GAME.dollars/5), G.GAME.interest_cap/5)"
position = "after"
payload = '''
for i = 1, #G.jokers.cards do
    if G.jokers.cards[i].ability.name == "j_fam_rug_pull" then
        local var = math.ceil((G.GAME.interest_amount*math.min(math.floor(G.GAME.dollars/5), G.GAME.interest_cap/5)))
        dollars = dollars - var*2
        G.jokers.cards[i].ability.extra.cash = G.jokers.cards[i].ability.extra.cash + math.ceil(var)
        G.jokers.cards[i].ability.extra.mult = G.jokers.cards[i].ability.extra.mult_mod * G.jokers.cards[i].ability.extra.cash 
        add_round_eval_row({bonus = true, name='interest', pitch = pitch, dollars = -math.ceil(var)})
    end
end
'''
match_indent = true 

[[patches]]
[patches.pattern]
target = "functions/state_events.lua" 
pattern = "add_round_eval_row({bonus = true, name='interest', pitch = pitch, dollars = G.GAME.interest_amount*math.min(math.floor(G.GAME.dollars/5), G.GAME.interest_cap/5)})"
position = "before"
payload = '''
local rug_pull = false
for i = 1, #G.jokers.cards do
    if G.jokers.cards[i].ability.name == "j_fam_rug_pull" then
        rug_pull = true
    end
end
if not rug_pull then
'''
match_indent = true 

[[patches]]
[patches.pattern]
target = "functions/state_events.lua" 
pattern = "add_round_eval_row({bonus = true, name='interest', pitch = pitch, dollars = G.GAME.interest_amount*math.min(math.floor(G.GAME.dollars/5), G.GAME.interest_cap/5)})"
position = "after"
payload = '''
end
'''
match_indent = true  

[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/utils.lua"]'
pattern = "if (G.P_CENTERS[(card.edition or {}).key] or {}).never_scores then return true end"
position = "before"
payload = '''
if card.ability.never_scores then
    return true
end
'''
match_indent = true 

[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/utils.lua"]'
pattern = "if (G.P_CENTERS[(card.edition or {}).key] or {}).always_scores then return true end"
position = "before"
payload = '''
if card.ability.always_scores then
    return true
end
'''
match_indent = true 

[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/utils.lua"]'
pattern = "return is_stone and not is_wild"
position = "before"
payload = '''
if card.ability.no_suit then
    return true
end
'''
match_indent = true  

[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/utils.lua"]'
pattern = '''
for k, _ in pairs(SMODS.get_enhancements(card)) do
    if k == 'm_stone' or G.P_CENTERS[k].no_rank then return true end
end
'''
position = "before"
payload = '''
if card.ability.no_rank then
    return true
end
'''
match_indent = true  

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "elseif self.ability.name == 'Blueprint' then"
position = "before"
payload = '''
elseif self.ability.name == 'j_fam_crimsonotype' then
    self.ability.blueprint_compat_ui = self.ability.blueprint_compat_ui or ''; self.ability.blueprint_compat_check = nil
    main_end = (self.area and self.area == G.jokers) and {
        {n=G.UIT.C, config={align = "bm", minh = 0.4}, nodes={
            {n=G.UIT.C, config={ref_table = self, align = "m", colour = G.C.JOKER_GREY, r = 0.05, padding = 0.06, func = 'blueprint_compat'}, nodes={
                {n=G.UIT.T, config={ref_table = self.ability, ref_value = 'blueprint_compat_ui',colour = G.C.UI.TEXT_LIGHT, scale = 0.32*0.8}},
            }}
        }}
    } or nil
elseif self.ability.name == 'j_fam_thinktank' then
    self.ability.blueprint_compat_ui = self.ability.blueprint_compat_ui or ''; self.ability.blueprint_compat_check = nil
    main_end = (self.area and self.area == G.jokers) and {
        {n=G.UIT.C, config={align = "bm", minh = 0.4}, nodes={
            {n=G.UIT.C, config={ref_table = self, align = "m", colour = G.C.JOKER_GREY, r = 0.05, padding = 0.06, func = 'blueprint_compat'}, nodes={
                {n=G.UIT.T, config={ref_table = self.ability, ref_value = 'blueprint_compat_ui',colour = G.C.UI.TEXT_LIGHT, scale = 0.32*0.8}},
            }}
        }}
    } or nil
'''
match_indent = true 

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name == 'Hologram' then"
position = "before"
payload = '''
if self.ability.set == 'tekana' then
	self.hover_tilt = self.hover_tilt*1.5
    self.children.floating_sprite2:draw_shader('hologram', nil, self.ARGS.send_to_shader, nil, self.children.center, 0.2*scale_mod, 0*rotate_mod)
    self.hover_tilt = self.hover_tilt/1.5
	local scale_mod = 0.07-- + 0.02*math.cos(1.8*G.TIMERS.REAL) + 0.00*math.cos((G.TIMERS.REAL - math.floor(G.TIMERS.REAL))*math.pi*14)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^3
    local rotate_mod = 0--0.05*math.cos(1.219*G.TIMERS.REAL) + 0.00*math.cos((G.TIMERS.REAL)*math.pi*5)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^2
	self.children.floating_sprite3:draw_shader('dissolve',0, nil, nil, self.children.center, 0.25*scale_mod, rotate_mod,nil, 0.1--[[ + 0.03*math.cos(1.8*G.TIMERS.REAL)--]],nil, 0.6)
	self.children.floating_sprite3:draw_shader('dissolve', nil, nil, nil, self.children.center, 0.25*scale_mod, rotate_mod) 
	self.children.floating_sprite4:draw_shader('hologram', nil, self.ARGS.send_to_shader, nil, self.children.center, 1*scale_mod, 0*rotate_mod)
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.config.center.soul_pos and (self.config.center.discovered or self.bypass_discovery_center) then"
position = "after"
payload = '''
if self.config.center.third_layer and (self.config.center.discovered or self.bypass_discovery_center) then
    local scale_mod = 0.07-- + 0.02*math.cos(1.8*G.TIMERS.REAL) + 0.00*math.cos((G.TIMERS.REAL - math.floor(G.TIMERS.REAL))*math.pi*14)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^3
    local rotate_mod = 0--0.05*math.cos(1.219*G.TIMERS.REAL) + 0.00*math.cos((G.TIMERS.REAL)*math.pi*5)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^2
	if self.ability.set == 'tekana' then
		local scale_mod = 0.07 + 0.02*math.sin(1.8*G.TIMERS.REAL) + 0.00*math.sin((G.TIMERS.REAL - math.floor(G.TIMERS.REAL))*math.pi*14)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^3
        local rotate_mod = 0.05*math.sin(1.219*G.TIMERS.REAL) + 0.00*math.sin((G.TIMERS.REAL)*math.pi*5)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^2
		self.children.floating_sprite2:draw_shader('dissolve',0, nil, nil, self.children.center, 0.5*scale_mod, rotate_mod,nil, 0.1--[[ + 0.03*math.cos(1.8*G.TIMERS.REAL)--]],nil, 0.6)
		self.children.floating_sprite2:draw_shader('dissolve', nil, nil, nil, self.children.center, 0.5*scale_mod, rotate_mod) 
	else
		self.children.floating_sprite2:draw_shader('dissolve',0, nil, nil, self.children.center,scale_mod, rotate_mod,nil, 0.1--[[ + 0.03*math.cos(1.8*G.TIMERS.REAL)--]],nil, 0.6)
		self.children.floating_sprite2:draw_shader('dissolve', nil, nil, nil, self.children.center, scale_mod, rotate_mod) 
	end
end
if self.config.center.fouth_layer and (self.config.center.discovered or self.bypass_discovery_center) then
    local scale_mod = 0.07-- + 0.02*math.cos(1.8*G.TIMERS.REAL) + 0.00*math.cos((G.TIMERS.REAL - math.floor(G.TIMERS.REAL))*math.pi*14)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^3
    local rotate_mod = 0--0.05*math.cos(1.219*G.TIMERS.REAL) + 0.00*math.cos((G.TIMERS.REAL)*math.pi*5)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^2
	if self.ability.set == 'tekana' then
		local scale_mod = 0.07 + 0.02*math.sin(1.8*G.TIMERS.REAL) + 0.00*math.sin((G.TIMERS.REAL - math.floor(G.TIMERS.REAL))*math.pi*14)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^3
        local rotate_mod = 0.05*math.sin(1.219*G.TIMERS.REAL) + 0.00*math.sin((G.TIMERS.REAL)*math.pi*5)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^2
	else
		self.children.floating_sprite3:draw_shader('dissolve',0, nil, nil, self.children.center, 0.5*scale_mod, rotate_mod,nil, 0.1--[[ + 0.03*math.cos(1.8*G.TIMERS.REAL)--]],nil, 0.6)
		self.children.floating_sprite3:draw_shader('dissolve', nil, nil, nil, self.children.center, 0.5*scale_mod, rotate_mod) 
	end
end
if self.config.center.fifth_layer and (self.config.center.discovered or self.bypass_discovery_center) then
    local scale_mod = 0.07-- + 0.02*math.cos(1.8*G.TIMERS.REAL) + 0.00*math.cos((G.TIMERS.REAL - math.floor(G.TIMERS.REAL))*math.pi*14)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^3
    local rotate_mod = 0--0.05*math.cos(1.219*G.TIMERS.REAL) + 0.00*math.cos((G.TIMERS.REAL)*math.pi*5)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^2
	if self.ability.set == 'tekana' then
		local scale_mod = 0.07 + 0.02*math.sin(1.8*G.TIMERS.REAL) + 0.00*math.sin((G.TIMERS.REAL - math.floor(G.TIMERS.REAL))*math.pi*14)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^3
        local rotate_mod = 0.05*math.sin(1.219*G.TIMERS.REAL) + 0.00*math.sin((G.TIMERS.REAL)*math.pi*5)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^2
	end
    self.children.floating_sprite4:draw_shader('dissolve',0, nil, nil, self.children.center, 0.5*scale_mod, rotate_mod,nil, 0.1--[[ + 0.03*math.cos(1.8*G.TIMERS.REAL)--]],nil, 0.6)
	self.children.floating_sprite4:draw_shader('dissolve', nil, nil, nil, self.children.center, 0.5*scale_mod, rotate_mod)
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.seal == 'Blue' and #G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit then"
position = "before"
payload = '''
if self.config.center == G.P_CENTERS.m_fam_gilded then
    if self.ability.extra.p_dollars <= 0 then
        self:set_ability(G.P_CENTERS.m_steel, nil, true)
		card_eval_status_text(self, 'extra', nil, nil, nil, {message = 'Delamination!', colour = G.C.UI.TEXT_INACTIVE})
		G.E_MANAGER:add_event(Event({
            func = function()
                self:juice_up()
                return true
            end
        })) 
    else
        ease_dollars(self.ability.extra.p_dollars)
		card_eval_status_text(self, 'extra', nil, nil, nil, {message = localize('$')..self.ability.extra.p_dollars, colour = G.C.MONEY})
        self.ability.extra.p_dollars = self.ability.extra.p_dollars - 1
		self.ability.extra.left = self.ability.extra.left - 1
    end
	ret.effect = true
end
if self.seal == 'fam_sapphire_seal' and #G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit then
    create_consumable("Spectral", nil, nil, nil)
	ret.effect = true
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local edition = poll_edition('standard_edition'..G.GAME.round_resets.ante, edition_rate, true)"
position = "before"
payload = '''
if G.GAME.modifiers.fam_force_dual then
	notsuit = card.base.suit
	suit = pseudorandom_element({'Spades','Hearts','Diamonds','Clubs'}, pseudoseed('dual_deck'))
	if suit == notsuit then
		while suit == notsuit do
			suit = pseudorandom_element({'Spades','Hearts','Diamonds','Clubs'}, pseudoseed('dual_deck'))
		end
	end
	if suit == 'Spades' then
		card.ability.is_spade = true
	elseif suit == 'Hearts' then
		card.ability.is_heart = true
	elseif suit == 'Diamonds' then
		card.ability.is_diamond = true
	elseif suit == 'Clubs' then
		card.ability.is_club = true
	end
	set_sprite_suits(card, false)
end
'''
match_indent = true 

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name == 'Blueprint' or self.ability.name == 'Brainstorm' then"
position = "before"
payload = '''
if self.ability.name == 'j_fam_crimsonotype' or self.ability.name == 'j_fam_thinktank' then
	local other_joker = nil
    if self.ability.name == 'j_fam_thinktank' then
        other_joker = G.jokers.cards[#G.jokers.cards]
    elseif self.ability.name == 'j_fam_crimsonotype' then
        for i = 1, #G.jokers.cards do
            if G.jokers.cards[i] == self then other_joker = G.jokers.cards[i-1] end
        end
    end
    if other_joker and other_joker ~= self and other_joker.config.center.blueprint_compat then
        self.ability.blueprint_compat = 'compatible'
    else
        self.ability.blueprint_compat = 'incompatible'
    end
end
'''
match_indent = true

# Show edition on Edition Decks
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.children.back:draw(overlay)"
position = "after"
payload = '''
local currentBack = self.params.viewed_back and G.GAME.viewed_back or G.GAME.selected_back
if currentBack.effect.config.fam_force_edition then
    self.children.back:draw_shader(currentBack.effect.config.fam_force_edition , nil, self.ARGS.send_to_shader, true)
end
if currentBack.effect.config.fam_force_edition == 'negative' then
    self.children.back:draw_shader('negative', nil, self.ARGS.send_to_shader, true)
    self.children.center:draw_shader('negative_shine', nil, self.ARGS.send_to_shader, true)
end
'''
match_indent = true