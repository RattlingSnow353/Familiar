[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# Sixers Scrapbook
[[patches]]
[patches.pattern]
target = "functions/button_callbacks.lua"
pattern = "if #G.hand.highlighted <= 0 or G.GAME.blind.block_play or #G.hand.highlighted > 5 then"
position = "at"
payload = '''
if #G.hand.highlighted <= 0 or G.GAME.blind.block_play or #G.hand.highlighted > G.hand.config.highlighted_limit then
'''
match_indent = true 

# Debit Card
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "elseif config.name == 'interest' then"
position = "before"
payload = '''
elseif config.name == 'debit' then
    local debit_card = false
    for i = 1, #G.jokers.cards do
        if G.jokers.cards[i].ability.name == "j_fam_debit_card" then
            debit_card = true
        end
    end
    if debit_card then
        table.insert(left_text, {n=G.UIT.T, config={text = num_dollars, scale = 0.8*scale, colour = G.C.RED, shadow = true, juice = true}})
        table.insert(left_text,{n=G.UIT.O, config={object = DynaText({string = {" Debit Card (Half of total)"}, colours = {G.C.UI.TEXT_LIGHT}, shadow = true, pop_in = 0, scale = 0.4*scale, silent = true})}})
    end
'''
match_indent = true 

[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = "add_round_eval_row({name = 'bottom', dollars = dollars})"
position = "before"
payload = '''
for i = 1, #G.jokers.cards do
    if G.jokers.cards[i].ability.name == "j_fam_debit_card" then
        dollars = dollars/2
        G.jokers.cards[i].ability.extra.last_cash = G.jokers.cards[i].ability.extra.cash
        G.jokers.cards[i].ability.extra.cash = G.jokers.cards[i].ability.extra.cash + math.ceil(dollars)
        add_round_eval_row({bonus = true, name='debit', pitch = pitch, dollars = -math.ceil(dollars)})
        dollars = math.floor(dollars)
    end
end
'''
match_indent = true 

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "elseif self.ability.name == 'Blueprint' then"
position = "before"
payload = '''
elseif self.ability.name == 'j_fam_crimsonotype' then
    self.ability.blueprint_compat_ui = self.ability.blueprint_compat_ui or ''; self.ability.blueprint_compat_check = nil
    main_end = (self.area and self.area == G.jokers) and {
        {n=G.UIT.C, config={align = "bm", minh = 0.4}, nodes={
            {n=G.UIT.C, config={ref_table = self, align = "m", colour = G.C.JOKER_GREY, r = 0.05, padding = 0.06, func = 'blueprint_compat'}, nodes={
                {n=G.UIT.T, config={ref_table = self.ability, ref_value = 'blueprint_compat_ui',colour = G.C.UI.TEXT_LIGHT, scale = 0.32*0.8}},
            }}
        }}
    } or nil
elseif self.ability.name == 'j_fam_thinktank' then
    self.ability.blueprint_compat_ui = self.ability.blueprint_compat_ui or ''; self.ability.blueprint_compat_check = nil
    main_end = (self.area and self.area == G.jokers) and {
        {n=G.UIT.C, config={align = "bm", minh = 0.4}, nodes={
            {n=G.UIT.C, config={ref_table = self, align = "m", colour = G.C.JOKER_GREY, r = 0.05, padding = 0.06, func = 'blueprint_compat'}, nodes={
                {n=G.UIT.T, config={ref_table = self.ability, ref_value = 'blueprint_compat_ui',colour = G.C.UI.TEXT_LIGHT, scale = 0.32*0.8}},
            }}
        }}
    } or nil
'''
match_indent = true 

# [[patches]]
# [patches.pattern]
# target = "card.lua"
# pattern = "if self.ability.name == 'Hologram' then"
# position = "after"
# payload = '''
# elseif self.ability.set == 'tekana' then
# 	self.hover_tilt = self.hover_tilt*1.5
#     self.children.floating_sprite2:draw_shader('hologram', nil, self.ARGS.send_to_shader, nil, self.children.center, 0.2*scale_mod, 0*rotate_mod)
#     self.hover_tilt = self.hover_tilt/1.5
# 	local scale_mod = 0.07-- + 0.02*math.cos(1.8*G.TIMERS.REAL) + 0.00*math.cos((G.TIMERS.REAL - math.floor(G.TIMERS.REAL))*math.pi*14)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^3
#     local rotate_mod = 0--0.05*math.cos(1.219*G.TIMERS.REAL) + 0.00*math.cos((G.TIMERS.REAL)*math.pi*5)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^2
# 	self.children.floating_sprite3:draw_shader('dissolve',0, nil, nil, self.children.center, 0.25*scale_mod, rotate_mod,nil, 0.1--[[ + 0.03*math.cos(1.8*G.TIMERS.REAL)--]],nil, 0.6)
# 	self.children.floating_sprite3:draw_shader('dissolve', nil, nil, nil, self.children.center, 0.25*scale_mod, rotate_mod) 
# 	self.children.floating_sprite4:draw_shader('hologram', nil, self.ARGS.send_to_shader, nil, self.children.center, 1*scale_mod, 0*rotate_mod)
# '''
# match_indent = true
# 
# [[patches]]
# [patches.pattern]
# target = "card.lua"
# pattern = "if self.config.center.soul_pos and (self.config.center.discovered or self.bypass_discovery_center) then"
# position = "after"
# payload = '''
# if self.config.center.third_layer and (self.config.center.discovered or self.bypass_discovery_center) then
#     local scale_mod = 0.07-- + 0.02*math.cos(1.8*G.TIMERS.REAL) + 0.00*math.cos((G.TIMERS.REAL - math.floor(G.TIMERS.REAL))*math.pi*14)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^3
#     local rotate_mod = 0--0.05*math.cos(1.219*G.TIMERS.REAL) + 0.00*math.cos((G.TIMERS.REAL)*math.pi*5)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^2
# 	if self.ability.set == 'tekana' then
# 		local scale_mod = 0.07 + 0.02*math.sin(1.8*G.TIMERS.REAL) + 0.00*math.sin((G.TIMERS.REAL - math.floor(G.TIMERS.REAL))*math.pi*14)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^3
#         local rotate_mod = 0.05*math.sin(1.219*G.TIMERS.REAL) + 0.00*math.sin((G.TIMERS.REAL)*math.pi*5)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^2
# 		self.children.floating_sprite2:draw_shader('dissolve',0, nil, nil, self.children.center, 0.5*scale_mod, rotate_mod,nil, 0.1--[[ + 0.03*math.cos(1.8*G.TIMERS.REAL)--]],nil, 0.6)
# 		self.children.floating_sprite2:draw_shader('dissolve', nil, nil, nil, self.children.center, 0.5*scale_mod, rotate_mod) 
# 	else
# 		self.children.floating_sprite2:draw_shader('dissolve',0, nil, nil, self.children.center,scale_mod, rotate_mod,nil, 0.1--[[ + 0.03*math.cos(1.8*G.TIMERS.REAL)--]],nil, 0.6)
# 		self.children.floating_sprite2:draw_shader('dissolve', nil, nil, nil, self.children.center, scale_mod, rotate_mod) 
# 	end
# end
# if self.config.center.fouth_layer and (self.config.center.discovered or self.bypass_discovery_center) then
#     local scale_mod = 0.07-- + 0.02*math.cos(1.8*G.TIMERS.REAL) + 0.00*math.cos((G.TIMERS.REAL - math.floor(G.TIMERS.REAL))*math.pi*14)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^3
#     local rotate_mod = 0--0.05*math.cos(1.219*G.TIMERS.REAL) + 0.00*math.cos((G.TIMERS.REAL)*math.pi*5)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^2
# 	if self.ability.set == 'tekana' then
# 		local scale_mod = 0.07 + 0.02*math.sin(1.8*G.TIMERS.REAL) + 0.00*math.sin((G.TIMERS.REAL - math.floor(G.TIMERS.REAL))*math.pi*14)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^3
#         local rotate_mod = 0.05*math.sin(1.219*G.TIMERS.REAL) + 0.00*math.sin((G.TIMERS.REAL)*math.pi*5)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^2
# 	else
# 		self.children.floating_sprite3:draw_shader('dissolve',0, nil, nil, self.children.center, 0.5*scale_mod, rotate_mod,nil, 0.1--[[ + 0.03*math.cos(1.8*G.TIMERS.REAL)--]],nil, 0.6)
# 		self.children.floating_sprite3:draw_shader('dissolve', nil, nil, nil, self.children.center, 0.5*scale_mod, rotate_mod) 
# 	end
# end
# if self.config.center.fifth_layer and (self.config.center.discovered or self.bypass_discovery_center) then
#     local scale_mod = 0.07-- + 0.02*math.cos(1.8*G.TIMERS.REAL) + 0.00*math.cos((G.TIMERS.REAL - math.floor(G.TIMERS.REAL))*math.pi*14)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^3
#     local rotate_mod = 0--0.05*math.cos(1.219*G.TIMERS.REAL) + 0.00*math.cos((G.TIMERS.REAL)*math.pi*5)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^2
# 	if self.ability.set == 'tekana' then
# 		local scale_mod = 0.07 + 0.02*math.sin(1.8*G.TIMERS.REAL) + 0.00*math.sin((G.TIMERS.REAL - math.floor(G.TIMERS.REAL))*math.pi*14)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^3
#         local rotate_mod = 0.05*math.sin(1.219*G.TIMERS.REAL) + 0.00*math.sin((G.TIMERS.REAL)*math.pi*5)*(1 - (G.TIMERS.REAL - math.floor(G.TIMERS.REAL)))^2
# 	else
# 		self.children.floating_sprite4:draw_shader('dissolve',0, nil, nil, self.children.center, 0.5*scale_mod, rotate_mod,nil, 0.1--[[ + 0.03*math.cos(1.8*G.TIMERS.REAL)--]],nil, 0.6)
# 		self.children.floating_sprite4:draw_shader('dissolve', nil, nil, nil, self.children.center, 0.5*scale_mod, rotate_mod) 
# 	end
# end
# '''
# match_indent = true
# 
# 
# [[patches]]
# [patches.pattern]
# target = "card.lua"
# pattern = '''if k ~= 'focused_ui' and k ~= "front" and k ~= "back" and k ~= "soul_parts" and k ~= "center" and k ~= 'floating_sprite' and k~= "shadow" and k~= "use_button" and k ~= 'buy_button' and k ~= 'buy_and_use_button' and k~= "debuff" and k ~= 'price' and k~= 'particles' and k ~= 'h_popup' then v:draw() end'''
# position = "at"
# payload = '''if k ~= 'focused_ui' and k ~= "front" and k ~= "back" and k ~= "soul_parts" and k ~= "center" and k ~= 'floating_sprite' and k ~= 'floating_sprite2' and k ~= 'floating_sprite3' and k ~= 'floating_sprite4' and k~= "shadow" and k~= "use_button" and k ~= 'buy_button' and k ~= 'buy_and_use_button' and k~= "debuff" and k ~= 'price' and k~= 'particles' and k ~= 'h_popup' then v:draw() end'''
# match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.seal == 'Blue' and #G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit then"
position = "before"
payload = '''
if self.config.center == G.P_CENTERS.m_fam_gilded then
    if self.ability.extra.p_dollars <= 0 then
        self:set_ability(G.P_CENTERS.m_steel, nil, true)
		card_eval_status_text(self, 'extra', nil, nil, nil, {message = 'Delamination!', colour = G.C.UI.TEXT_INACTIVE})
		G.E_MANAGER:add_event(Event({
            func = function()
                self:juice_up()
                return true
            end
        })) 
    else
        ease_dollars(self.ability.extra.p_dollars)
		card_eval_status_text(self, 'extra', nil, nil, nil, {message = localize('$')..self.ability.extra.p_dollars, colour = G.C.MONEY})
        self.ability.extra.p_dollars = self.ability.extra.p_dollars - 1
		self.ability.extra.left = self.ability.extra.left - 1
    end
	ret.effect = true
end
if self.seal == 'fam_sapphire_seal' and #G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit then
    create_consumable("Spectral", nil, nil, nil)
	ret.effect = true
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local edition = poll_edition('standard_edition'..G.GAME.round_resets.ante, edition_rate, true)"
position = "before"
payload = '''
if G.GAME.modifiers.fam_force_dual then
	notsuit = card.base.suit
	suit = pseudorandom_element({'Spades','Hearts','Diamonds','Clubs'}, pseudoseed('dual_deck'))
	if suit == notsuit then
		while suit == notsuit do
			suit = pseudorandom_element({'Spades','Hearts','Diamonds','Clubs'}, pseudoseed('dual_deck'))
		end
	end
	if suit == 'Spades' then
		card.ability.is_spade = true
	elseif suit == 'Hearts' then
		card.ability.is_heart = true
	elseif suit == 'Diamonds' then
		card.ability.is_diamond = true
	elseif suit == 'Clubs' then
		card.ability.is_club = true
	end
	set_sprite_suits(card, false)
end
'''
match_indent = true 

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name == 'Blueprint' or self.ability.name == 'Brainstorm' then"
position = "before"
payload = '''
if self.ability.name == 'j_fam_crimsonotype' or self.ability.name == 'j_fam_thinktank' then
	local other_joker = nil
    if self.ability.name == 'j_fam_thinktank' then
        other_joker = G.jokers.cards[#G.jokers.cards]
    elseif self.ability.name == 'j_fam_crimsonotype' then
        for i = 1, #G.jokers.cards do
            if G.jokers.cards[i] == self then other_joker = G.jokers.cards[i-1] end
        end
    end
    if other_joker and other_joker ~= self and other_joker.config.center.blueprint_compat then
        self.ability.blueprint_compat = 'compatible'
    else
        self.ability.blueprint_compat = 'incompatible'
    end
end
'''
match_indent = true

# Show edition on Edition Decks
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.children.back:draw(overlay)"
position = "after"
payload = '''
local currentBack = self.params.viewed_back and G.GAME.viewed_back or G.GAME.selected_back
if currentBack.effect.config.fam_force_edition then
    self.children.back:draw_shader(currentBack.effect.config.fam_force_edition , nil, self.ARGS.send_to_shader, true)
end
if currentBack.effect.config.fam_force_edition == 'negative' then
    self.children.back:draw_shader('negative', nil, self.ARGS.send_to_shader, true)
    self.children.center:draw_shader('negative_shine', nil, self.ARGS.send_to_shader, true)
end
'''
match_indent = true